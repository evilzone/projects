package com.snakeladdergame;

import java.util.Deque;
import java.util.LinkedList;

public class Game {

    Board board;
    Dice dice;
    Deque<Player> players = new LinkedList<>();
    Player winner;

    public Game() {
        initializeGame();
    }

    private void initializeGame() {
        board = new Board(10, 4, 5);
        dice = new Dice(1);
        winner = null;
        addPlayers();
    }

    private void addPlayers() {
        players.add(new Player("p1", 0));
        players.add(new Player("p2", 0));
    }

    public void startGame() {

        while(winner == null) {
            Player playerTurn = findPlayerTurn();
            System.out.println("player turn is " + playerTurn.id + " current pos is " + playerTurn.currentPosition);

            int diceNumbers = dice.rollDice();

            int playerNewPosition = playerTurn.currentPosition + diceNumbers;
            playerNewPosition = jumpCheck(playerNewPosition);
            playerTurn.currentPosition = playerNewPosition;

            System.out.println("player turn is : " + playerTurn.id + " new pos is : " + playerTurn.currentPosition);

            if(playerTurn.currentPosition >= board.cells.length * board.cells.length) {
                winner = playerTurn;
            }
        }
        System.out.println("WINNER is: " + winner.id);
    }

    private Player findPlayerTurn() {
        Player player = players.removeFirst();
        players.add(player);
        return player;
    }

    private int jumpCheck(int playerNewPosition) {
        if(playerNewPosition > board.cells.length * board.cells.length - 1) {
            return playerNewPosition;
        }

        Cell cell = board.getCell(playerNewPosition);

        if(cell.jump != null && cell.jump.start == playerNewPosition) {
            String jumpBy = (cell.jump.start < cell.jump.end) ? "Ladder" : "Snake";
            System.out.println("jump done by: " + jumpBy);
            return cell.jump.end;
        }
        return playerNewPosition;
    }
}
