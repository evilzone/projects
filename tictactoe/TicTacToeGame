package com.tictactoe;

import javafx.util.Pair;

import java.util.Deque;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class TicTacToeGame {

    Deque<Player> players;
    Board gameBoard;

    TicTacToeGame() {
        initializeGame();
    }

    public void initializeGame() {
        players = new LinkedList<>();

        PlayingPieceO playingPieceO = new PlayingPieceO();
        Player player1 = new Player("Player1", playingPieceO);

        PlayingPieceX playingPieceX = new PlayingPieceX();
        Player player2 = new Player("Player2", playingPieceX);

        players.add(player1);
        players.add(player2);

        gameBoard = new Board(3);
    }

    public String startGame() {
        boolean noWinner = true;

        while(noWinner) {
            Player playerTurn = players.removeFirst();
            gameBoard.printBoard();
            List<Pair<Integer, Integer>> freeCells = gameBoard.getFreeCells();

            if(freeCells.isEmpty()) {
                noWinner = false;
                continue;
            }

            System.out.println("Player: " + playerTurn.name + " Enter row, col: ");
            Scanner scanner = new Scanner(System.in);
            String s = scanner.nextLine();
            String[] values = s.split(",");
            int row = Integer.valueOf(values[0]);
            int col = Integer.valueOf(values[1]);

            boolean success = gameBoard.addPiece(row, col, playerTurn.getPlayingPiece());

            if(!success) {
                System.out.println("Incorrect position");
                players.addFirst(playerTurn);
                continue;
            }

            players.add(playerTurn);

            boolean isWinner = isWinningCondition(row, col, playerTurn.playingPiece.pieceType);

            if(isWinner) {
                return playerTurn.name;
            }
        }
        return "tie";
    }

    private boolean isWinningCondition(int row, int col, PieceType pieceType) {

        boolean rowMatch = true;
        boolean colMatch = true;
        boolean diagonalMatch = true;
        boolean antiDiagonalMatch = true;

        for(int i = 0; i < gameBoard.size; i++) {
            if(gameBoard.board[i][col] == null || gameBoard.board[i][col].pieceType != pieceType) {
                colMatch = false;
            }
        }

        for(int j = 0; j < gameBoard.size; j++) {
            if(gameBoard.board[row][j] == null || gameBoard.board[row][j].pieceType != pieceType) {
                rowMatch = false;
            }
        }

        for(int i = 0;  i < gameBoard.size; i++) {
            if(gameBoard.board[i][i] == null || gameBoard.board[i][i].pieceType != pieceType) {
                diagonalMatch = false;
            }
        }

        for(int i = 0;  i < gameBoard.size; i++) {
            if(gameBoard.board[i][gameBoard.size - i - 1] == null ||
                    gameBoard.board[i][gameBoard.size - i - 1].pieceType != pieceType) {
                antiDiagonalMatch = false;
            }
        }
        return rowMatch || colMatch || diagonalMatch || antiDiagonalMatch;
    }
}
